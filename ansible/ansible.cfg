# TODO : DIAGRAM : Configuration > Ansible > server1, server2, server3
# Alternative to Shell Scripts and individually executing commands on each server
# YAML Playbooks
# No need for anything on the Server side! (except for SSH and Python)
# Simple Push Based Approach - Make CFG Change => Push
# ansible.cfg (./ansible.cfg or environment_variable ANSIBLE_CONFIG, ~/.ansible.cfg)

# brew install ansible
# export AWS_ACCESS_KEY_ID=*****
# export AWS_SECRET_ACCESS_KEY=*****
# chmod 400 default-ec2.pem 
# ssh -vvv -i ~/aws/aws_keys/default-ec2.pem ec2-user@34.231.110.243

#--check option explore
#ansible --version
#ansible -m ping all
#ansible --list-host all
#ansible --list-host cfl-aws
#ansible --list-host *dev*
#ansible --list-host \!control
#ansible --list-host *dev*:*qa*
#ansible *dev*:*qa* -a "whoami"
#ls ~/aws/aws_keys/default-ec2.pem
#ansible all -a "whoami"
#ansible all -a "uname"
#ansible all -a "uname -a"
#ansible all -a "pwd"
#ansible in28minutes -a "python --version"
#ansible-playbook 01-basics/05-combined.yml --list-tasks
#ansible-playbook 01-basics/05-combined.yml --list-hosts
#ansible-playbook 01-basics/05-combined.yml --list-tags
#ansible-playbook -l qa 01-basics/01-ping.yml 
#ansible-playbook 01-basics/03-variables.yml --start-at-task=Distribution
#sudo /usr/bin/python -m pip install boto
#ansible-playbook 01-basics/06-ec2.yml 
#ansible-playbook -l dev 01-basics/04-install-apache.yml 

[defaults]
inventory=./ansible_hosts
remote_user=ec2-user
private_key_file=~/aws/aws_keys/default-ec2.pem
host_key_checking=False
retry_files_enabled=False
interpreter_python=auto_silent